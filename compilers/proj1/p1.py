# Compiler Project 1 - Lexical Analyser
#	By: Alexander Besuden (n00850421)
#	Date: 1/19/2020
#
#	This program was made to pull out and tokenize keywords, integers and identifiers that follow
#	the guidlines of the C- language framework. The result of this program will create a text file
#	that can be passed to a syntax analyser (parser) which is for project 2.

import sys
import re

# define lexical conventions
keywords = ["else", "if", "int", "return", "void", "while"]
specialChars = ["+", "-", "*", "/", "<", "<=", ">", ">=", "==", "!=", "=", ";", ",", "(", ")", "[", "]", "{", "}"]

# variables allowed to change
## for testing ## developerSpecifiedFile = "test_fn"
developerSpecifiedFile = sys.argv[1] # enable for turnin

# variables not allowed to change
insideMLC = False
singleLC = False
prevError = False

# read in file
fileRead = open(developerSpecifiedFile, "r")

# look through each line of code
for eachFnLine in fileRead:

	# display input
	if eachFnLine != "\n":
		print("Input: " + eachFnLine),

	# RegEx
	prevError = False
	singleLC = False
	reExp = re.findall("[0-9]+|[\(]|[\)]|[\[]|[\]]|[\{]|[\}]|[+]|[-]|[=]{2}|!=|<=|>=|[*|/|<|<=|>|>=|;|,|/*|*/]+|[a-zA-Z]+|.", eachFnLine)

	# look at each word generated by the regular expression
	for word in reExp:

		# look for start of multi-line comment
		if (len(word) > 1):
			if (word[0] == "/") & (word[1] == "*"):
				insideMLC = True
			if (word[0] == "/") & (word[1] == "/"):
				singleLC = True
		# ignore anything in the middle of a multi-line comment
		if insideMLC == True:
			1*2
		else:

			# ignore spaces and reset error
			if word == " ":
				if prevError:
					print("")
				prevError = False
				continue
			# ignore single line comments
			if singleLC:
				continue

			# any word that follows an error, include in the error
                        elif (prevError == True) & (word.isalpha() | word.isdigit()):
				print(word)
				prevError = False

			# create tokens
			elif word in keywords:
				print("KW: " + word)
			elif word in specialChars:
				print(word)
			elif word.isdigit():
				print("INT: " + word)
			elif word.isalpha():
				print("ID: " + word)
			elif word == "*/":		# special outlire case
				print("*")
				print("/")
			elif prevError == True:
				print("")
				print("Error: " + word),
			else:
				print("Error: " + word),
				prevError = True

		# find end of multi-line comment
                if  (len(word) > 1):
			if (word[len(word)-2] == "*") & (word[len(word)-1] == "/"):
				insideMLC = False

	# add space before the "Input: " feild
	print("")
